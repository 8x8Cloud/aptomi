package graphviz

import (
	"bytes"
	"fmt"
	"github.com/Aptomi/aptomi/pkg/slinga/util"
	"github.com/awalterschulze/gographviz"
	"image"
	"image/png"
	"os"
	"os/exec"
)

// Saves graph into a file
func getGraphImage(graph *gographviz.Graph) (image.Image, error) {
	// Original graph in .dot
	fileNameDot := util.WriteTempFile("graphviz", graph.String())
	defer os.Remove(fileNameDot)

	// Graph with improved layout in .dot
	fileNameDotFlat := fileNameDot + ".flat.dot"
	defer os.Remove(fileNameDotFlat)

	// Graph in .png
	fileNamePng := fileNameDot + ".png"
	defer os.Remove(fileNamePng)

	// Call graphviz to unflatten an image and get a better layout
	{
		cmd := "unflatten"
		args := []string{"-f", "-l", "4", "-o" + fileNameDotFlat, fileNameDot}
		command := exec.Command(cmd, args...)
		var outb, errb bytes.Buffer
		command.Stdout = &outb
		command.Stderr = &errb
		if err := command.Run(); err != nil || len(errb.String()) > 0 {
			panic(fmt.Sprintf("Unable to execute graphviz '%s' with '%s': %s %s %s", cmd, args, outb.String(), errb.String(), err.Error()))
		}
	}

	// Call graphviz to generate an image
	{
		cmd := "dot"
		args := []string{"-Tpng", "-o" + fileNamePng, fileNameDotFlat}
		// args := []string{"-Tpng", "-Kfdp", "-o" + fileNamePng, fileNameDotFlat}
		command := exec.Command(cmd, args...)
		var outb, errb bytes.Buffer
		command.Stdout = &outb
		command.Stderr = &errb
		if err := command.Run(); err != nil || len(errb.String()) > 0 {
			panic(fmt.Sprintf("Unable to execute graphviz '%s' with '%s': %s %s %s", cmd, args, outb.String(), errb.String(), err.Error()))
		}
	}

	// Read image and return
	filePng, err := os.Open(fileNamePng)
	if err != nil {
		panic(fmt.Sprintf("Unable to load PNG generated by graphviz '%s': %s", fileNamePng, err.Error()))
	}
	defer filePng.Close()
	return png.Decode(filePng)
}
