# Definition of Twitter Stats service
- kind: service
  metadata:
    namespace: social
    name: twitter_stats

  labels:
    type: dev-apps

  components:

    - name: analytics_pipeline
      contract: platform/analytics_pipeline

    # Publisher (Twitter Streaming API -> kafka)
    - name: tweepub
      code:
        type: helm
        params:
          chartRepo: https://mirantisworkloads.storage.googleapis.com
          chartName: "{{ .Labels.chart_name }}"

          # Pass labels to publisher application
          twitter:
            baseWord: "{{ default .Labels.base_word }}"
            appKey: "{{ default .Labels.appKey }}"
            appSecret: "{{ default .Labels.appSecret }}"
            tokenKey: "{{ default .Labels.tokenKey }}"
            tokenSecret: "{{ default .Labels.tokenSecret }}"
            locations: "{{ default .Labels.locations }}"

          # Tell publisher where to put messages (kafka connection url & topic)
          kafka:
            deployChart: false
            addresses:
              kafka: "{{ .Discovery.analytics_pipeline.kafka.kafka.url }}"
            topic: "tweepub-{{ .Discovery.service.instanceId }}"

      dependencies:
        - analytics_pipeline

    # Spark job (takes tweets -> does hashtags stats -> puts stats into hdfs)
    - name: tweetics
      code:
        type: helm
        params:
          chartRepo: https://mirantisworkloads.storage.googleapis.com
          chartName: tweetics

          zookeeper:
            addresses:
              zookeeper: "{{ .Discovery.analytics_pipeline.kafka.zookeeper.zookeeper.url }}"

          kafka:
            addresses:
              kafka:  "{{ .Discovery.analytics_pipeline.kafka.kafka.url }}"
            topic: "tweepub-{{ .Discovery.service.instanceId }}"

          spark:
            deployChart: false
            addresses:
              spark: "{{ .Discovery.analytics_pipeline.spark.spark.url }}"
            batchDuration: 5

          hdfs:
            addresses:
              namenode: "{{ .Discovery.analytics_pipeline.hdfs.hdfs.url }}"
            path: "/twitter-{{ .Discovery.service.instanceId }}/results"
      dependencies:
        - analytics_pipeline

    # Visualizer (takes stats from hdfs and shows on web page)
    - name: tweeviz
      code:
        type: helm
        params:
          chartRepo: https://mirantisworkloads.storage.googleapis.com
          chartName: tweeviz

          image:
            repository: aptomi/
            name: tweeviz
            tag: "v1.2.0-{{ .Labels.tsvisimage }}"

          topListSize: "{{ .Labels.display_top_hashtags }}"

          header: Twitter Stats {{ .User.Name }} ({{ .Discovery.instance }})

          hdfs:
            addresses:
              namenode: "{{ .Discovery.analytics_pipeline.hdfs.hdfs.url }}"
            path: "/twitter-{{ .Discovery.service.instanceId }}"

      dependencies:
        - analytics_pipeline

# Contract for Twitter Stats
- kind: contract
  metadata:
    namespace: social
    name: twitter_stats

  contexts:
    # Twitter Stats implementation which receives twitter messages from Twitter Streaming API
    - name: realtime
      criteria:
        require-all:
          - org == 'it' && is_operator
      change-labels:
        set:
          display_top_hashtags: 10
          chart_name: tweepub
      allocation:
        service: twitter_stats

    # Twitter Stats implementation which generates a constant stream of fake twitter messages
    - name: fake
      criteria:
        require-all:
          - org == 'dev'
      change-labels:
        set:
          display_top_hashtags: 100
          chart_name: tweepub-fake
          base_word: "stage"
      allocation:
        service: twitter_stats
        keys:
          - "{{ .User.Name }}"
